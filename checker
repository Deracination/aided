#!/usr/bin/env perl
use v5.20;
use strict;
use FindBin qw($Bin);
use File::Basename;
use Getopt::Long;
use autodie;

my $NRETRY=3;
#my $SSH='/usr/bin/ssh -t -t -q';
my $SSH='/usr/bin/ssh -q -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null"';
my $SCP='/usr/bin/scp -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -p -q -C';

my $AIDE_HOME='/var/lib/aide';
my $AIDE_ORG='/usr/sbin/aide';
my $AIDE_EXE='/usr/sbin/aide-checker';

my $verbose=0;
my $update;
my $init;
my $dbdir="$Bin/db";
my $who=$ENV{USER};
my $mail;

GetOptions(
    'update=s'  =>  \$update,
    'init=s'   =>  \$init,
    'db=s'      =>  \$dbdir,
    'who=s'     =>  \$who,
    'mail=s'    =>  \$mail,
    'verbose'   =>  \$verbose,
) or die ("Usage: $0 [--who=username] [--update=NAME] [--init=NAME] [--db=DIR] [--mail=person\@nowhere.com] [--verbose]\n");

$SSH.=' -v' if $verbose;
$SCP.=' -v' if $verbose;

if($update) {
    die "--who required\n" unless $who;
    update($update,$dbdir,$who);
} elsif($init) {
    die "--who required\n" unless $who;
    init_server($init,$dbdir,$who);
} else {
    opendir(my $dh,$dbdir);
    my @sites = grep { /^[^\.]/ && -d "$dbdir/$_" } sort readdir($dh);
    closedir($dh);

    if(@ARGV) {
        my %selected=map{ $_ => 1 } @ARGV;
        @sites = grep { exists $selected{$_} } @sites;
    }

    my @failed;
    my @passed;
    foreach my $site (@sites) {
        if(check($site,$dbdir)) {
            push @passed,$site;
        } else {
            push @failed,$site;
        }
    }

    my $msg=get_message(\@passed,\@failed);

    if($mail) {
        system("echo '$msg'|mail -s 'AIDE checks' $mail");
    }

    say $msg;
    exit(0);
}

sub get_message($$) {
    my($passed,$failed)=@_;

    my $passes = @$passed ? join(', ',@$passed) : 'NONE';
    my $fails = @$failed ? join(', ',@$failed) : 'NONE';

    return <<EOF;
Passed AIDE checks: $passes
Failed: $fails

EOF
}


sub run_remote($) {
    my $cmds=shift;

    foreach my $cmd (@$cmds) {
        say $cmd if $verbose;
        system($cmd) == 0 or die ("$cmd: failed $?\n");
    }
}

sub put_aide($$) {
    my($site,$dbdir)=@_;

    put_as_root($site,"$dbdir/$site/aide",$AIDE_EXE);

    run_remote([
        "$SSH $site 'sudo chcon system_u:object_r:aide_exec_t:s0 $AIDE_EXE'",
    ]);

    put_as_root($site,"$dbdir/$site/aide.db.gz","$AIDE_HOME/aide.db.gz");
}

sub check {
    my($site,$dbdir)=@_;

    my $retry=$NRETRY;
    do {
        my $res = eval {
            return _check($site,$dbdir);
        };
        if($@) {
            warn $@;
            sleep (rand(60));
        } else {
            return $res;
        }
    } while($retry--);

    return 0;
}

sub _check {
    my($site,$dbdir)=@_;

    say "Checking $site";

    put_aide($site,$dbdir);

    foreach my $cmd (
        "$SSH $site 'sudo $AIDE_EXE --check'",
    ) {
        say $cmd if $verbose;
        system($cmd) == 0 or return 0;
    }

    return 1;
}

sub update {
    my($site,$dbdir,$who)=@_;

    say "Updating $site into $dbdir as $who";

    put_aide($site,$dbdir);

    put_as_root($site,"$dbdir/$site/aide.conf","/etc/aide.conf");
    run_remote([
        "$SSH $site 'sudo chcon system_u:object_r:etc_t:s0 /etc/aide.conf'",
    ]);

    run_remote([
        "$SSH $site 'sudo $AIDE_EXE --init'", # --update doesn't work on old versions of aide
        "$SSH $site 'sudo cp -f -p $AIDE_HOME/aide.db.new.gz $AIDE_HOME/aide.db.gz; sudo ls -l $AIDE_HOME/aide.db.gz'",
    ]);

    say "fetching updated aide.db.gz...";
    fetch_as_who($site,"$AIDE_HOME/aide.db.gz",$who,"$dbdir/$site");
}

sub init_server {
    my($site,$dbdir,$who)=@_;

    my $dest="$dbdir/$site";

    -d $dest || mkdir($dest);

    run_remote([
        "$SSH -t $site sudo -- '/bin/bash -c \"[[ -f /var/lib/aide/aide.db.gz ]] ||(echo aide init && aide --init && mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz)\"'",
    ]);

    for my $file ("$AIDE_HOME/aide.db.gz",$AIDE_ORG,'/etc/aide.conf') {
        say "fetching $file...";
        fetch_as_who($site,$file,$who,$dest);
    }
}

sub fetch_as_who {
    my($site,$file,$who,$dest)=@_;

    say "Fetching $file => $dest" if $verbose;

    my $fn=basename($file);
    my $tmpf="/tmp/$fn";

    run_remote([
        # scp with -p to preserve mode - this is essential for the aide binary
        # as the config file cannot disable checking the original file mode of
        # the binary.
        "$SSH $site 'sudo cp -p -f $file $tmpf; sudo chown $who $tmpf'",
        "$SCP $site:$tmpf $dest/$fn",
        "$SSH $site 'sudo rm -f $tmpf'",
    ]);
}

sub put_as_root {
    my($site,$file,$dest)=@_;
    say "Putting $file => $dest" if $verbose;

    my $fn=basename($file);

    run_remote([
        # scp with -p to preserve mode - this is essential for the aide binary
        "$SCP $file $site:/tmp/",
        "$SSH $site 'sudo mv -f /tmp/$fn $dest; sudo chown root.root $dest'",
    ]);
}
