#!/usr/bin/env perl
use v5.20;
use strict;
use FindBin qw($Bin);
use File::Basename;
use Getopt::Long;
use JSON;
use Term::ReadKey;
use autodie;

my $NRETRY=3;
#my $SSH='/usr/bin/ssh -t -t -q';
my $SSH='/usr/bin/ssh -q -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null"';
my $SCP='/usr/bin/scp -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -p -q -C';

my $AIDE_HOME='/var/lib/aide';
my $AIDE_ORG='/usr/sbin/aide';
my $AIDE_EXE='/usr/sbin/aide';

my $verbose=0;
my $update;
my $init;
my $dbdir="$Bin/db";
my $who=$ENV{USER};
my $mail;

sub get_message($$);
sub get_config($$);

GetOptions(
    'db=s'      =>  \$dbdir,
    'update=s'      =>  \$update,
    'mail=s'    =>  \$mail,
    'verbose'   =>  \$verbose,
) or die ("Usage: $0 [--update=NAME] [--db=DIR] [--mail=person\@nowhere.com] [--verbose]\n");

$SSH.=' -v' if $verbose;
$SCP.=' -v' if $verbose;

if($update) {
    die "--who required\n" unless $who;
    update($update,$dbdir,$who);
} else {
    opendir(my $dh,$dbdir);
    my @sites = grep { /^[^\.]/ && -d "$dbdir/$_" } sort readdir($dh);
    closedir($dh);

    if(@ARGV) {
        my %selected=map{ $_ => 1 } @ARGV;
        @sites = grep { exists $selected{$_} } @sites;
    }

    my @passed;
	my @failed;
    foreach my $site (@sites) {
        if(check($site,$dbdir)) {
            push @passed,$site;
        } else {
            push @failed,$site;
        }
    }

    my $msg=get_message(\@passed,\@failed);

    if($mail) {
        system("echo '$msg'|mail -s 'AIDE checks' $mail");
    }

    say $msg;
    exit(0);
}

sub get_message($$) {
    my($passed,$failed)=@_;

    my $passes = @$passed ? join(', ',@$passed) : 'NONE';
    my $fails = @$failed ? join(', ',@$failed) : 'NONE';

    return <<EOF;
Passed AIDE checks: $passes
Failed: $fails

EOF
}


# returns 1 if succeed or $ignore=1, 0 if fails
sub run_remote($;$) {
    my $cmds=shift;
	my $ignore=shift // 0;

    foreach my $cmd (@$cmds) {
        say $cmd if $verbose;
		my $res=system($cmd);
        if($res != 0 && !$ignore) { warn ("$cmd: failed $?\n"); return 0 }
    }

	return 1;
}

sub check {
    my($site,$dbdir)=@_;

    my $retry=$NRETRY;
    do {
        my $res = eval {
            say "################################## Checking $site";

            my $r = _check($site,$dbdir);

            say "################################## Finished $site";

            return $r;
        };
        if($@) {
            warn $@;
            sleep (rand(60));
        } else {
            return $res;
        }
    } while($retry--);

    return 0;
}

sub update {
    my($site,$dbdir,$who)=@_;

	my %config=get_config($site,$dbdir);

    say "Updating $site";

	my @remote;

	if(ref $config{update}) {
		push @remote,$config{update}->@*;
	} else {
		push @remote,$config{update};
	}

	if(grep /SUDO_PW/, @remote) {
		print "Enter sudo password: ";

		ReadMode('noecho');
		ReadMode('raw');

		my $pw='';

		while(1) {
			my $c;
			1 until defined($c=ReadKey(-1));
			last if $c eq "\n";
			print "*";
			$pw .= $c;
		}

		ReadMode('restore');

		foreach (@remote) {
			s/\{SUDO_PW\}/$pw/g; # provide sudo password where needed
		}
	}

	foreach my $remote (@remote) {
		run_remote(["$SSH $site '$remote'"],1) or die ("failed!\n");
	}
}

sub _check {
    my($site,$dbdir)=@_;

	my %config=get_config($site,$dbdir);

	return run_remote([
        "$SSH $site '$config{check}'",
	]);
}


sub	get_config($$) {
	my($site,$dbdir)=@_;

	my %config=(
		'update'	=>	[
			"sudo $AIDE_EXE --update",
        	"echo {SUDO_PW}|sudo -S mv $AIDE_HOME/aide.db.new.gz $AIDE_HOME/aide.db.gz"
		],
		'check'		=>	"sudo $AIDE_EXE --check",
	);

	# allow site-specific configurations which define update and check
	# - this lets us support both ubuntu and almalinux which put aide
	# in different places
	my $cfile="$dbdir/$site/config.json";

	if(-r $cfile) {
		open(my $fh,'<',$cfile);

		local $/; # slurp
		my $str = <$fh>;

		close($fh);

		my $sc = decode_json($str);


		%config=(%config,$sc->%*);
	}

	#	use Data::Dumper;
	#	say Dumper \%config;

	return %config;
}
